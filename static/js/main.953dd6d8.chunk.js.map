{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","Input","_useState","useState","_useState2","Object","slicedToArray","input","setInput","dispatch","useDispatch","react_default","a","createElement","className","type","value","onChange","e","target","onClick","console","log","concat","Date","now","TodoItem","_ref","Checkbox","checked","color","inputProps","aria-label","App","useSelector","src_components_TodoItem","src_components_Input","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAMMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aANmB,CACjBC,SAAU,IAMZC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMH,SAASK,KAAKD,EAAOE,UAE/BC,SAAU,SAACJ,EAAOC,GAEdD,EAAMH,SAASQ,IAAI,SAACC,GACbL,EAAOE,UAAUG,EAAKC,MACJ,IAAdD,EAAKE,KACJF,EAAKE,MAAO,EAEZF,EAAKE,MAAO,WAQEf,EAAUgB,QAAhCV,aAAUK,aAEXM,EAAiB,SAACV,GAAD,OAAWA,EAAMW,MAAMd,UAEtCJ,IAAf,QCJemB,SAvBD,WAAM,IAAAC,EAEUC,mBAAS,IAFnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETK,EAFSH,EAAA,GAEFI,EAFEJ,EAAA,GAGVK,EAAWC,cAYnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAOT,EAAOU,SAAU,SAAAC,GAAC,OAAEV,EAASU,EAAEC,OAAOH,UAChEL,EAAAC,EAAAC,cAAA,UAAQO,QAbI,WACZC,QAAQC,IAAR,UAAAC,OAAsBhB,IAEtBE,EAASrB,EAAS,CAChBO,KAAMY,EACNV,MAAM,EACND,GAAI4B,KAAKC,WAOX,kBCGOC,SApBE,SAAAC,GAAsB,IAApB3C,EAAoB2C,EAApB3C,KAAMa,EAAc8B,EAAd9B,KAAMD,EAAQ+B,EAAR/B,GACvBa,EAAWC,cAMjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,QAAShC,EACTiC,MAAM,UACNb,SATc,WAClBR,EAAShB,EAASG,KASdmC,WAAY,CAACC,aAAc,wBAE5BrB,EAAAC,EAAAC,cAAA,KAAGC,UAAWjB,GAAQ,kBAAmBb,MCUjCiD,MAxBf,WACE,IAAM/C,EAAWgD,YAAYnC,GAE7B,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEX5B,EAASQ,IAAI,SAACC,GAAD,OACXgB,EAAAC,EAAAC,cAACsB,EAAD,CACEnD,KAAMW,EAAKA,KACXE,KAAMF,EAAKE,KACXD,GAAID,EAAKC,QAKnBe,EAAAC,EAAAC,cAACuB,EAAD,SCtBOC,EAAQC,YAAe,CAClCC,QAAS,CACPvC,MAAOwC,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPpC,EAAAC,EAAAC,cAACF,EAAAC,EAAMoC,WAAP,KACErC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAUZ,MAAOA,GACf1B,EAAAC,EAAAC,cAACqC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.953dd6d8.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    todoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n  reducers: {\r\n      saveTodo: (state, action) => {\r\n          state.todoList.push(action.payload)\r\n      }, \r\n      setCheck: (state, action) => {\r\n          // eslint-disable-next-line \r\n          state.todoList.map((item) => {\r\n              if(action.payload===item.id) {\r\n                  if(item.done === true) {\r\n                      item.done = false\r\n                  } else {\r\n                      item.done = true\r\n                  }\r\n              }\r\n          })\r\n      }\r\n  }\r\n});\r\n\r\nexport const {saveTodo, setCheck} = todoSlice.actions\r\n\r\nexport const selectTodoList = (state) => state.todos.todoList\r\n\r\nexport default todoSlice.reducer","import React, {useState} from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveTodo } from '../features/todoSlice';\r\nimport './Input.css'\r\n\r\nconst Input = () => {\r\n\r\n    const [input, setInput] = useState('');\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodo = () => {\r\n        console.log(`Adding ${input}`);\r\n\r\n        dispatch(saveTodo({\r\n          item: input,\r\n          done: false,\r\n          id: Date.now(),\r\n        }));\r\n    }\r\n\r\n  return (\r\n    <div className='input'>\r\n        <input type='text' value={input} onChange={e=>setInput(e.target.value)}/>\r\n        <button onClick={addTodo}>Add</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input","import { Checkbox } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './TodoItem.css'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCheck } from '../features/todoSlice'\r\n\r\nconst TodoItem = ({name, done, id}) => {\r\n  const dispatch = useDispatch()\r\n  \r\n  const handleCheck = () => {\r\n    dispatch(setCheck(id))\r\n  }\r\n\r\n  return (\r\n    <div className='todoItem'>\r\n      <Checkbox \r\n        checked={done}\r\n        color='primary'\r\n        onChange={handleCheck}\r\n        inputProps={{'aria-label': 'secondary checkbox'}}\r\n      />\r\n       <p className={done && 'todoItem--done'}>{name}</p> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\nimport './App.css';\nimport Input from './components/Input';\nimport TodoItem from './components/TodoItem';\nimport { useSelector } from 'react-redux';\nimport { selectTodoList } from './features/todoSlice';\n\nfunction App() {\n  const todoList = useSelector(selectTodoList);\n  \n  return (\n    <div className=\"app\">\n      <div className='appContainer'>\n        <h1>ToDo List</h1>\n        <div className='appTodoContainer'>\n          {\n            todoList.map((item) => (\n              <TodoItem \n                name={item.item}\n                done={item.done}\n                id={item.id}\n              />\n            ))\n          }\n        </div>\n      <Input />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todoSlice'\n\nexport const store = configureStore({\n  reducer: {\n    todos: todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}